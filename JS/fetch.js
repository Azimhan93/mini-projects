/* async function loadProducts() {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users');

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }

        const users = await response.json();

        const filtered = users.filter(el => el.username.length > 8);

        console.log("üì¶ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Ü–µ–Ω–∞ > 20):");
        filtered.forEach(p => console.log(`${p.username}`));

    } catch (error) {
        console.error("‚ö†Ô∏è", error.message);
    } finally {
        console.log("üîî –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω");
    }
}

loadProducts(); */

/* let user = {
    name: 'John',
    surname: 'Smith'
  };
  
  let response = await fetch('/article/fetch/post/user', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json;charset=utf-8'
    },
    body: JSON.stringify(user)
  });
  
  let result = await response.json();
  console.log(result.message); */


/*   async function loadUsers() {
    try {
      const res = await fetch("https://jsonplaceholder.typicode.com/users");
  
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
  
      const data = await res.json();     // –ø–∞—Ä—Å–∏–º JSON
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", data);
    } catch (err) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err.message);
    } finally {
      console.log("üîî –ì–æ—Ç–æ–≤–æ");
    }
  }

  loadUsers(); */


/*   async function createUser(user) {
    try {
      const res = await fetch("https://jsonplaceholder.typicode.com/users", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",   // –≤–∞–∂–Ω–æ!
          "Accept": "application/json"
        },
        body: JSON.stringify(user)
      });
  
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
  
      const created = await res.json();
      console.log("–°–æ–∑–¥–∞–Ω:", created);
    } catch (e) {
      console.error("‚ö†Ô∏è", e.message);
    }
  }
  
  createUser({ name: "Orkhan", email: "a@b.c" }); */


/* async function loadProducts() {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);

    try {
        const res = await fetch("https://fakestoreapi.com/products", {
            signal: controller.signal
        });

        if (!res.ok) throw new Error(`HTTP ${res.status}`);

        const data = await res.json();

        const filtered = data.filter(p => p.rating.rate > 3);

        const sorted = filtered.sort((a, b) => b.rating.rate - a.rating.rate);
    
        console.log("‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ü–µ–Ω–∞ > 50, –ø–æ —É–±—ã–≤–∞–Ω–∏—é):");
        sorted.forEach(p => console.log(`${p.category} ‚Äî ${p.rating.rate}`));

    } catch (error) {
        if (err.name === "AbortError") {
            console.error("‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω (—Ç–∞–π–º–∞—É—Ç)");
          } else {
            console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞:", error.message);
          }
    } finally {
        clearTimeout(timeoutId);
    }
    
}

loadProducts();

async function createPost() {
  try {
    const res = await fetch("https://jsonplaceholder.typicode.com/posts", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        title: "Hello world",
        body: "–ú–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ fetch!",
        userId: 1
      })
    });

    if (!res.ok) throw new Error(`HTTP ${res.status}`);

    const data = await res.json();
    console.log("‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω, id:", data.id);

  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:", err.message);
  }
}

createPost(); */





async function loadUsers() {  
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 3000);


  try {
    
      const res = await fetch("https://jsonplaceholder.typicode.com/todos", {
        signal: controller.signal
      });

      if (!res.ok) throw new Error(`HTTP ${res.status}`);

      const data = await res.json();

      const filtered = data.filter(p => p.completed === true);

      const sorted = filtered.sort((a, b) => b.id - a.id);

      console.log("‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ id:");
      sorted.forEach(p => console.log(`${p.id} ‚Äî ${p.title}`));

  } catch (error) {
      if (error.name === "AbortError") {
        console.error("‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω (—Ç–∞–π–º–∞—É—Ç)");
      } else {
        console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞:", error.message);
      }
  } finally {
      clearTimeout(timeoutId);
  }
}

loadUsers();

async function createPost() {
  try {
    const res = await fetch("https://jsonplaceholder.typicode.com/comments", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        postId: 1,
        name: "Test User",
        email: "test@example.com",
        body: "Hello world!"
      })
    });

    if (!res.ok) throw new Error(`HTTP ${res.status}`);

    const data = await res.json();
    console.log("‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω, id:", data.id);

  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:", err.message);
  }
}

createPost();


async function updatePost() {
  try {
    const res = await fetch("https://jsonplaceholder.typicode.com/posts/5", {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        id: 5,
        title: "Test Title",
        body: "Bye world!",
        userId: 1
      })
    });

    if (!res.ok) throw new Error(`HTTP ${res.status}`);

    const data = await res.json();
    console.log("‚úèÔ∏è –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω:", data);

  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", err.message);
  }
}

updatePost();


async function deletePost() {
  try {
    const res = await fetch("https://jsonplaceholder.typicode.com/posts/10", {
      method: "DELETE"
    });

    if (!res.ok) throw new Error(`HTTP ${res.status}`);

    console.log("üóëÔ∏è –ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ!");

  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", err.message);
  }
}

deletePost();